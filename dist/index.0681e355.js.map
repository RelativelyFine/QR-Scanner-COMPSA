{"mappings":"AAAA,MAAMA,UAAYC,OAAOC,OAEnBC,MAAQC,SAASC,cAAc,SAC/BC,cAAgBF,SAASG,eAAe,aACxCC,OAASF,cAAcG,WAAW,MAElCC,SAAWN,SAASG,eAAe,aACnCI,WAAaP,SAASG,eAAe,cACrCK,UAAYR,SAASG,eAAe,eACpCM,WAAaT,SAASG,eAAe,cACrCO,MAAQV,SAASG,eAAe,SAChCQ,UAAYX,SAASG,eAAe,aAE1C,IAAIS,UAAW,EAEfhB,UAAUiB,SAAWC,MAAOC,UACpBC,QAAQD,EAAA,EAGhBN,WAAWQ,QAAUH,MAAOC,UACpBC,QAAQD,EAAA,EAGhB,MAAMC,QAAUF,MAAOC,IACjBA,IACFH,UAAW,EAEXb,MAAMmB,UAAUC,YAAYC,SAASC,IACnCA,EAAMC,MAAI,IAGI,SAAZP,EAAIQ,KACNhB,WAAWiB,UAAY,mBAEvBjB,WAAWiB,UAAYT,QACjBU,iBAAiBV,IAEzBT,SAASoB,QAAS,EAClBjB,WAAWiB,QAAS,EACpBxB,cAAcwB,QAAS,EACvBlB,UAAUkB,QAAS,EACrB,EAoBF,SAASC,OACPzB,cAAc0B,OAAS7B,MAAM8B,YAC7B3B,cAAc4B,MAAQ/B,MAAMgC,WAC5B3B,OAAO4B,UAAUjC,MAAO,EAAG,EAAGG,cAAc4B,MAAO5B,cAAc0B,QAEjEhB,UAAYqB,sBAAsBN,KACpC,CAEA,SAASO,OACP,IACEpC,OAAOqC,QAGT,CAFE,MAAOC,GACPC,WAAWH,KAAM,IACnB,CACF,CAEApB,eAAeW,iBAAiBV,GAC9BuB,aAAeC,KAAKC,MAAMzB,GAAKuB,OAC/BG,eAAiBzC,SAASG,eAAe,YAAYuC,MACrDC,IAAM,6CAA6CL,mBAAmBG,iBAChEG,MAAMD,KACTE,MAAM9B,IACL+B,QAAQC,IAAIhC,GACZL,MAAMgB,QAAS,EACff,UAAUa,UAAY,MAEvBwB,OAAOC,IACNH,QAAQC,IAAIE,GACZvC,MAAMgB,QAAS,EACff,UAAUa,UAAYyB,CAAA,GAE5B,CAhDAzC,UAAUS,QAAU,KAClBiC,UAAUC,aACPC,aAAa,CAAErD,MAAO,CAAEsD,WAAY,iBACpCR,MAAK,SAAUS,GACd7C,WAAWiB,QAAS,EACpBd,UAAW,EACXN,SAASoB,QAAS,EAClBlB,UAAUkB,QAAS,EACnBxB,cAAcwB,QAAS,EACvB3B,MAAMwD,aAAa,eAAe,GAClCxD,MAAMmB,UAAYoC,EAClBvD,MAAMyD,OACN7B,OACAO,MACF","sources":["src/qrCodeScanner.js"],"sourcesContent":["const qrcodeBtn = window.qrcode;\n\nconst video = document.createElement(\"video\");\nconst canvasElement = document.getElementById(\"qr-canvas\");\nconst canvas = canvasElement.getContext(\"2d\");\n\nconst qrResult = document.getElementById(\"qr-result\");\nconst outputData = document.getElementById(\"outputData\");\nconst btnScanQR = document.getElementById(\"btn-scan-qr\");\nconst backButton = document.getElementById(\"backButton\");\nconst error = document.getElementById(\"error\");\nconst errorData = document.getElementById(\"errorData\");\n\nlet scanning = false;\n\nqrcodeBtn.callback = async (res) => {\n  await closeQR(res);\n};\n\nbackButton.onclick = async (res) => {\n  await closeQR(res);\n};\n\nconst closeQR = async (res) => {\n  if (res) {\n    scanning = false;\n\n    video.srcObject.getTracks().forEach((track) => {\n      track.stop();\n    });\n\n    if (res.type == \"click\") {\n      outputData.innerText = \"Scan Cancelled!\";\n    } else {\n      outputData.innerText = res;\n      await backendInterface(res);\n    }\n    qrResult.hidden = false;\n    backButton.hidden = true;\n    canvasElement.hidden = true;\n    btnScanQR.hidden = false;\n  }\n};\n\nbtnScanQR.onclick = () => {\n  navigator.mediaDevices\n    .getUserMedia({ video: { facingMode: \"environment\" } })\n    .then(function (stream) {\n      backButton.hidden = false;\n      scanning = true;\n      qrResult.hidden = true;\n      btnScanQR.hidden = true;\n      canvasElement.hidden = false;\n      video.setAttribute(\"playsinline\", true); // required to tell iOS safari we don't want fullscreen\n      video.srcObject = stream;\n      video.play();\n      tick();\n      scan();\n    });\n};\n\nfunction tick() {\n  canvasElement.height = video.videoHeight;\n  canvasElement.width = video.videoWidth;\n  canvas.drawImage(video, 0, 0, canvasElement.width, canvasElement.height);\n\n  scanning && requestAnimationFrame(tick);\n}\n\nfunction scan() {\n  try {\n    qrcode.decode();\n  } catch (e) {\n    setTimeout(scan, 300);\n  }\n}\n\nasync function backendInterface(res) {\n  net_id = await JSON.parse(res).net_id;\n  award_id = await document.getElementById(\"award-id\").value;\n  url = `https://compsa.ca/api/admin/manage?net_id=${net_id}&award_id=${award_id}`;\n  await fetch(url)\n    .then((res) => {\n      console.log(res);\n      error.hidden = true;\n      errorData.innerText = \"\";\n    })\n    .catch((err) => {\n      console.log(err);\n      error.hidden = false;\n      errorData.innerText = err;\n    });\n}\n"],"names":["qrcodeBtn","window","qrcode","video","document","createElement","canvasElement","getElementById","canvas","getContext","qrResult","outputData","btnScanQR","backButton","error","errorData","scanning","callback","async","res","closeQR","onclick","srcObject","getTracks","forEach","track","stop","type","innerText","backendInterface","hidden","tick","height","videoHeight","width","videoWidth","drawImage","requestAnimationFrame","scan","decode","e","setTimeout","net_id","JSON","parse","award_id","value","url","fetch","then","console","log","catch","err","navigator","mediaDevices","getUserMedia","facingMode","stream","setAttribute","play"],"version":3,"file":"index.0681e355.js.map"}